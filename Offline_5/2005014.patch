diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..81ab260
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "user.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..39f1e4c 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_tryit\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..bc1bd62 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(void(*fcn)(void*), void *arg, void *stack);
+int             thread_join(int thread_id);
+int             thread_exit(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +176,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvm_mirror(pagetable_t, pagetable_t, uint64);
+int             map_mem(pagetable_t, pagetable_t, uint64, uint64);
+int             unmap_mem(pagetable_t, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..e2461e0 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -9,12 +9,16 @@
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
+struct spinlock mem_lock[NPROC];
 
 struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
 
+int nextmemid = 1;
+struct spinlock memid_lock;
+
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
@@ -50,12 +54,16 @@ procinit(void)
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
+  initlock(&memid_lock, "nextmemid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
+  for(int i=0; i<NPROC; i++){
+    initlock(&mem_lock[i], "mem_lock");
+  }
 }
 
 // Must be called with interrupts disabled,
@@ -102,12 +110,24 @@ allocpid()
   return pid;
 }
 
+int allocmemid()
+{
+  int memid;
+  
+  acquire(&memid_lock);
+  memid = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&memid_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+allocproc()
 {
   struct proc *p;
 
@@ -123,7 +143,10 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_id = allocmemid();
   p->state = USED;
+  p->is_thread = 0;
+  p->memlock = &mem_lock[p - proc];
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,11 +181,17 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->pagetable && !p->is_thread)
     proc_freepagetable(p->pagetable, p->sz);
+  else if (p->pagetable)
+  {
+    uvmunmap(p->pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(p->pagetable, TRAPFRAME, 1, 0);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
+  p->mem_id = 0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
@@ -259,18 +288,61 @@ userinit(void)
 int
 growproc(int n)
 {
+  // printf("<-----------------growproc called by proc: %d------------------->\n", myproc()->pid);
   uint64 sz;
   struct proc *p = myproc();
+  acquire(p->memlock);
+  struct proc *pp;
+  if(!p->is_thread){
+    pp = p;
+  }
+  else{
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->mem_id == p->mem_id && !pp->is_thread){
+        break;
+      }
+    }
+  }
+
+  int old_sz = sz = pp->sz;
 
-  sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    // allocate for main process
+    if((sz = uvmalloc(pp->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(pp->memlock);
       return -1;
     }
+    // allocate for threads
+    for(struct proc *tp = proc; tp < &proc[NPROC]; tp++){
+      if(tp==pp || tp->state == UNUSED || tp->state == ZOMBIE){
+        continue;
+      }
+      if(tp->mem_id == pp->mem_id && tp->is_thread){
+        if((map_mem(pp->pagetable, tp->pagetable, old_sz, sz)) < 0) {
+          release(pp->memlock);
+          return -1;
+        }
+        tp->sz = sz;
+      }
+    }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    sz = uvmdealloc(pp->pagetable, sz, sz + n);
+    //unmap for threads
+    for(struct proc *tp = proc; tp < &proc[NPROC]; tp++){
+      if(tp==pp || tp->state == UNUSED || tp->state == ZOMBIE){
+        continue;
+      }
+      if(tp->mem_id == pp->mem_id && tp->is_thread){
+        if((unmap_mem(pp->pagetable, tp->sz, sz)) < 0) {
+          release(pp->memlock);
+          return -1;
+        }
+        tp->sz = sz;
+      }
+    }
   }
-  p->sz = sz;
+  pp->sz = sz;
+  release(pp->memlock);
   return 0;
 }
 
@@ -686,3 +758,132 @@ procdump(void)
     printf("\n");
   }
 }
+
+int thread_create(void(*fcn)(void*), void *arg, void *stack)
+{
+  int tid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    printf("allocproc failed in thread_create\n");
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvm_mirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    printf("uvm_mirror failed in thread_create\n");
+    return -1;
+  }
+  np->sz = p->sz;
+  np->mem_id = p->mem_id;
+  np->memlock = p->memlock;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  // np->trapframe->a0 = 0;
+  // increment reference counts on open file descriptors.
+  for(int i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  tid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->is_thread = 1;
+  np->trapframe->a0 = (uint64)arg;
+  np->trapframe->epc = (uint64)fcn;
+  np->trapframe->sp = (uint64)stack + PGSIZE;
+  np->trapframe->ra = 0xffffffff;
+  np->state = RUNNABLE;
+  release(&np->lock);
+  // printf("thread created with tid: %d\n", tid);
+  return tid;
+}
+
+int thread_join(int thread_id)
+{
+  struct proc *p=0;
+  // int havekids, tid;
+  struct proc *pp = myproc();
+
+  acquire(&wait_lock);
+
+  for(int i=0; i<NPROC; i++){
+    p = &proc[i];
+    if(p->parent == pp && p->is_thread && p->pid == thread_id){
+      break;
+    }
+  }
+  for(;;){
+    // No point waiting if we don't have any threads
+    if(p==0 || killed(pp)){
+      release(&wait_lock);
+      return -1;
+    }
+  
+    acquire(&p->lock);
+    if(p->state == ZOMBIE){
+        freeproc(p);
+        release(&p->lock);
+        release(&wait_lock);
+        return thread_id;
+    }
+    release(&p->lock);
+    
+    // Wait for the thread to exit.
+    sleep(pp, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+int thread_exit(void)
+{
+  struct proc *p = myproc();
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+  
+  acquire(&p->lock);
+
+  p->xstate = 0;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..bc9af13 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct spinlock *memlock;	   // find places to set and release the locks 
+  int is_thread;               // if it is thread
+  int mem_id;                  // All threads will have the same physical pages with the mothrer, hence the same memory ID
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..d687ffd 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9afef21 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..b2acd91 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,42 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  void (*fcn)(void*);
+  void *arg;
+  void *stack;
+  argaddr(0, (uint64*)&fcn);
+  argaddr(1, (uint64*)&arg);
+  argaddr(2, (uint64*)&stack);
+  if(fcn == 0)
+  {
+    printf("ERROR! thread_create: fcn is null\n");
+    return -1;
+  }
+  else if(stack == 0)
+  {
+    printf("ERROR! thread_create: stack is null\n");
+    return -1;
+  }
+  return thread_create(fcn, arg, stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0, &thread_id);
+  if(thread_id < 0)
+    return -1;
+  return thread_join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;  // not reached
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..562478d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -339,6 +339,76 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+// Given a parent process's page table, map
+// its memory into a child's page table.
+// returns 0 on success, -1 on failure.
+// unmaps on failure.
+int
+uvm_mirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvm_mirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvm_mirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int
+map_mem(pagetable_t mainp, pagetable_t thrdp, uint64 oldsz, uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  // PGROUNDUP rounds a value up to a multiple of PGSIZE
+  oldsz = PGROUNDUP(oldsz);
+  for(i = oldsz; i < newsz; i += PGSIZE){
+    if((pte = walk(mainp, i, 0)) == 0)
+      panic("map_mem: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("map_mem: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(thrdp, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(thrdp, oldsz, (newsz-oldsz) / PGSIZE+1, 1);
+  return -1;
+}
+
+int
+unmap_mem(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+   if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+
+  return newsz;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..95a2169
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,137 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct balance
+{
+    char name[32];
+    int amount;
+};
+
+// Mutual exclusion lock.
+struct thread_spinlock {
+  uint locked;       // Is the lock held?
+};
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+struct thread_mutex {
+  uint mutex;       // Is the lock held?
+};
+
+void
+thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->mutex = 0;
+}
+
+// Acquire the lock.
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+  while(__sync_lock_test_and_set(&lk->mutex, 1) != 0)
+  {
+    sleep(1);
+  }
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->mutex);
+}
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile("nop" :::);
+    }
+
+    return i;
+}
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+void do_work(void *arg)
+{
+    int i;
+    int old;
+
+    struct balance *b = (struct balance *)arg;
+    printf("Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++)
+    {
+        // lock and mlock will be implemented by you.
+        // thread_spin_lock(&lock);
+        thread_mutex_lock(&mlock);
+        old = total_balance;
+        delay(100000);
+        if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+        total_balance = old + 1;
+        // thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+    }
+
+    printf("Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[])
+{
+
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+
+    thread_spin_init(&lock);
+    thread_mutex_init(&mlock);
+
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    thread1 = thread_create(do_work, (void *)&b1, s1);
+    thread2 = thread_create(do_work, (void *)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+           thread1, r1, thread2, r2, total_balance);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/tryit.c b/user/tryit.c
new file mode 100644
index 0000000..b906199
--- /dev/null
+++ b/user/tryit.c
@@ -0,0 +1,203 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct balance
+{
+    char name[32];
+    int amount;
+};
+
+struct thread_mutex
+{
+    uint mutex; // Is the lock held?
+};
+
+void thread_mutex_init(struct thread_mutex *lk)
+{
+    lk->mutex = 0;
+}
+
+// Acquire the lock.
+void thread_mutex_lock(struct thread_mutex *lk)
+{
+    while (__sync_lock_test_and_set(&lk->mutex, 1) != 0)
+    {
+        sleep(1);
+    }
+    __sync_synchronize();
+}
+
+// Release the lock.
+void thread_mutex_unlock(struct thread_mutex *lk)
+{
+    __sync_synchronize();
+    __sync_lock_release(&lk->mutex);
+}
+
+struct thread_mutex mlock;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile("nop" :::);
+    }
+
+    return i;
+}
+
+int *m_ar, *t1_ar, *t2_ar;
+int **t1_2d, **t2_2d;
+int thread1, thread2, r1, r2;
+uint64 t1_arg, t2_arg;
+
+void do_work1(void *arg)
+{
+    struct balance *b = (struct balance *)arg;
+    printf("Starting do_work: s:%s\n", b->name);
+    int tid = getpid();
+    printf("tid: %d\n", tid);
+    int var;
+    if (tid == thread1)
+    {
+        t1_ar = (int *)malloc(128 * 10124);
+        for (int i = 0; i < 10; i++)
+        {
+            t1_ar[i] = i + 100;
+        }
+        t1_ar[3999] = 2005014;
+        var = 2005;
+        t1_arg = (uint64)&var;
+        // alloc a 2d array
+        t1_2d = (int **)malloc(20 * sizeof(int *));
+        for (int i = 0; i < 20; i++)
+        {
+            t1_2d[i] = (int *)malloc(20 * sizeof(int));
+        }
+        thread_mutex_lock(&mlock);
+        printf("<%d> t1_ar initialized\n", var);
+        thread_mutex_unlock(&mlock);
+        delay(10);
+        sleep(20);
+        thread_mutex_lock(&mlock);
+        printf("t2_ar: ");
+        for (int i = 0; i < 10; i++)
+        {
+            printf("%d ", t2_ar[i]);
+        }
+        printf("\n");
+        thread_mutex_unlock(&mlock);
+        total_balance++;
+    }
+    else if (tid == thread2)
+    {
+        t2_ar = (int *)malloc(1000 * sizeof(int));
+        for (int i = 0; i < 10; i++)
+        {
+            t2_ar[i] = i + 1000;
+        }
+        var = 2006;
+        t2_arg = (uint64)&var;
+        // alloc a 2d array
+        t2_2d = (int **)malloc(20 * sizeof(int *));
+        for (int i = 0; i < 20; i++)
+        {
+            t2_2d[i] = (int *)malloc(20 * sizeof(int));
+        }
+        thread_mutex_lock(&mlock);
+        printf("<%d> t2_ar initialized\n", var);
+        thread_mutex_unlock(&mlock);
+        delay(10);
+        sleep(20);
+        thread_mutex_lock(&mlock);
+        printf("t1_ar: ");
+        for (int i = 0; i < 10; i++)
+        {
+            printf("%d ", t1_ar[i]);
+        }
+        printf("\n");
+        thread_mutex_unlock(&mlock);
+        total_balance++;
+    }
+    total_balance++;
+    thread_mutex_lock(&mlock);
+    printf("<%d> main array: ", var);
+    for (int i = 0; i < 10; i++)
+    {
+        printf("%d ", m_ar[i]);
+    }
+    printf("\n");
+    thread_mutex_unlock(&mlock);
+    // for (i = 0; i < b->amount; i++)
+    // {
+    //     // lock and mlock will be implemented by you.
+    //     // thread_spin_lock(&lock);
+    //     thread_mutex_lock(&mlock);
+    //     old = total_balance;
+    //     delay(100000);
+    //     if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+    //     total_balance = old + 1;
+    //     // thread_spin_unlock(&lock);
+    //      thread_mutex_unlock(&mlock);
+    // }
+
+    printf("<%d> - Done...\n", tid);
+    if (tid == thread1)
+    {
+        free(t1_ar);
+    }
+    else if (tid == thread2)
+    {
+        free(t2_ar);
+    }
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[])
+{
+    void *s1, *s2;
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+    m_ar = (int *)malloc(10 * sizeof(int));
+    for (int i = 0; i < 10; i++)
+    {
+        m_ar[i] = i;
+    }
+    thread_mutex_init(&mlock);
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+    // capture the pointer of do_work1 function
+    void (*fcn)(void *) = &do_work1;
+    printf("do_work1: %p\n", fcn);
+    thread1 = thread_create(do_work1, (void *)&b1, s1);
+    thread2 = thread_create(do_work1, (void *)&b2, s2);
+    printf("thread1: %d, thread2: %d\n", thread1, thread2);
+    sleep(5);
+    printf("address of t1 var %lu\n", t1_arg);
+    printf("address of t2 var %lu\n", t2_arg);
+    *(int *)t1_arg = 5002;
+    *(int *)t2_arg = 6002;
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d balance: %d\n",
+           thread1, r1, thread2, r2, total_balance);
+    printf("t1_var: %d, t2_var: %d\n", *(int *)t1_arg, *(int *)t2_arg);
+    for (int i = 0; i < 10; i++)
+    {
+        printf("%d ", t1_ar[i]);
+    }
+    printf("\n%d\n", t1_ar[3999]);
+    for (int i = 0; i < 10; i++)
+    {
+        printf("%d ", t2_ar[i]);
+    }
+    printf("\n");
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..657e34e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *, void*);
+int thread_join(int);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..5c6bc71 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
\ No newline at end of file
