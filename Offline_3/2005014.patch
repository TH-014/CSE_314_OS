diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..7d547ee
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,10 @@
+{
+    "files.associations": {
+        "types.h": "c",
+        "param.h": "c",
+        "user.h": "c",
+        "defs.h": "c",
+        "pstat.h": "c",
+        "proc.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..20285b0 100644
--- a/Makefile
+++ b/Makefile
@@ -56,7 +56,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -Og -fno-omit-frame-pointer -ggdb -gdwarf-2 -g3
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 # CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -139,6 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
+	$U/_setlog\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..9b214b2 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -7,6 +7,7 @@ struct proc;
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct pstat;
 struct superblock;
 
 // bio.c
@@ -106,6 +107,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            srand (int);
+int             rand (void);
+int             settickets(int);
+int             getpinfo(struct pstat *);
+int             getrand(int , int);
+int             setlog(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..3f57514 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -5,6 +5,7 @@
 #include "defs.h"
 
 volatile static int started = 0;
+extern struct spinlock randlock;
 
 // start() jumps here in supervisor mode on all CPUs.
 void
@@ -29,6 +30,8 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    srand(14);
+    initlock(&randlock, "randlock");
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..ff1dbb3 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,32 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_0 2
+#define TIME_LIMIT_1 4
+#define WAIT_THRESH 6
+#define DEFAULT_TICKETS 10
+
+// Color Codes
+#define COLOR_RESET     "\033[0m"
+#define COLOR_RED       "\033[1;31m"
+#define COLOR_BLUE      "\033[1;34m"
+#define COLOR_GREEN     "\033[1;32m"
+#define COLOR_MAGENTA   "\033[1;35m"
+#define COLOR_YELLOW    "\033[1;33m"
+#define COLOR_WHITE     "\033[1;37m"
+#define COLOR_CYAN      "\033[1;36m"
+
+// Log Macros
+#define LOG_DEMO(fmt, ...) \
+    printf(COLOR_RED "DEMO: " fmt COLOR_RESET, ##__VA_ARGS__)
+#define LOG_PROMO(fmt, ...) \
+    printf(COLOR_BLUE "PROMO: " fmt COLOR_RESET, ##__VA_ARGS__)
+#define LOG_BOOST(fmt, ...) \
+    printf(COLOR_GREEN "BOOST: " fmt COLOR_RESET, ##__VA_ARGS__)
+#define LOG_LOTTERY(fmt, ...) \
+    printf(COLOR_MAGENTA "LOTTERY: " fmt COLOR_RESET, ##__VA_ARGS__)
+#define LOG_1(fmt, ...) \
+    printf(COLOR_YELLOW "" fmt COLOR_RESET, ##__VA_ARGS__)
+#define LOG_2(fmt, ...) \
+    printf(COLOR_CYAN "" fmt COLOR_RESET, ##__VA_ARGS__)
+    
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..10347df 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -26,6 +27,8 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+int log_status = 0; // 0 -> off, 1 -> on
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -145,6 +148,9 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->current_tickets = p->original_tickets = DEFAULT_TICKETS;
+  p->was_asleep = p->inQ = 0;
+  p->total_running_time = p->running_time = p->waiting_time = p->scheduled_count = p->ticks_in_q0 = p->ticks_in_q1 = 0;
 
   return p;
 }
@@ -295,6 +301,9 @@ fork(void)
     return -1;
   }
   np->sz = p->sz;
+  np->current_tickets = np->original_tickets = p->original_tickets;
+  // np->inQ = 0;
+  // np->running_time = np->waiting_time = np->scheduled_count = np->ticks_in_q0 = np->ticks_in_q1 = 0;
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -446,6 +455,7 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
+  int rr_index = 0;
 
   c->proc = 0;
   for(;;){
@@ -454,22 +464,76 @@ scheduler(void)
     // processes are waiting.
     intr_on();
 
+
+    int total_ticket = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if(p->state == RUNNABLE && p->inQ == 0) {
+        total_ticket += p->current_tickets;
+      }
+      release(&p->lock);
+    }
+
+    // reinitialize tickets for each process
+    if(total_ticket==0)
+    {
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state != UNUSED) {
+          p->current_tickets = p->original_tickets;
+        }
+        release(&p->lock);
+      }
+      continue;
+    }
+
+    int winner = -1, csum=0;
+    int target = getrand(1, total_ticket);
+
+    for(int i=0; i<NPROC; i++) {
+      p = &proc[i];
+      acquire(&p->lock);
+      if(p->state == RUNNABLE && p->inQ == 0) {
+        csum += p->current_tickets;
+        if(csum >= target) {
+          winner = i;
+          if(log_status)
+            LOG_LOTTERY("Process %d (%s) won in queue 0 with tickets %d\n", p->pid, p->name, p->current_tickets);
+          p->current_tickets--;
+          break;
+        }
       }
       release(&p->lock);
     }
+
+    if(winner==-1)
+    {
+      for(int i=0; i<NPROC; i++) {
+        rr_index = (rr_index+1)%NPROC;
+        p = &proc[rr_index];
+        acquire(&p->lock);
+        if(p->inQ && p->state == RUNNABLE) {
+          winner = rr_index;
+          break;
+        }
+        release(&p->lock);
+      }
+    }
+
+    // Switch to chosen process.  It is the process's job
+    // to release its lock and then reacquire it
+    // before jumping back to us.
+    p = &proc[winner];
+    p->state = RUNNING;
+    c->proc = p;
+    p->waiting_time = 0;
+    p->scheduled_count++;
+    swtch(&c->context, &p->context);
+
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+    release(&p->lock);
   }
 }
 
@@ -495,6 +559,18 @@ sched(void)
   if(intr_get())
     panic("sched interruptible");
 
+  if(p->was_asleep) {
+    // LOG_2("Process %d (%s) waking up, ran for %d ticks in queue: %d\n", p->pid, p->name, p->running_time, p->inQ);
+    p->was_asleep = 0;
+    if(p->inQ && p->running_time<TIME_LIMIT_1)
+    {
+      p->inQ = 0;
+      p->running_time -= (TIME_LIMIT_1 - TIME_LIMIT_0);
+      if(p->running_time<0) p->running_time = 0;
+      if(log_status)
+        LOG_PROMO("Process %d (%s) ran for %d time ticks, promoted to queue 0\n", p->pid, p->name, p->running_time);
+    }
+  }
   intena = mycpu()->intena;
   swtch(&p->context, &mycpu()->context);
   mycpu()->intena = intena;
@@ -506,9 +582,21 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
-  p->state = RUNNABLE;
-  sched();
-  release(&p->lock);
+  if(p->running_time<TIME_LIMIT_0 || (p->inQ==1 && p->running_time<TIME_LIMIT_1)) {
+    release(&p->lock);
+  }
+  else{
+    if(p->inQ == 0) {
+      p->inQ = 1;
+      // p->was_asleep = 0;
+      if(log_status)
+        LOG_DEMO("Process %d (%s) ran for %d time ticks, demoted to queue 1\n", p->pid, p->name, TIME_LIMIT_0);
+    }
+    p->state = RUNNABLE;
+    p->running_time = 0;
+    sched();
+    release(&p->lock);
+  }
 }
 
 // A fork child's very first scheduling by scheduler()
@@ -578,6 +666,7 @@ wakeup(void *chan)
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
         p->state = RUNNABLE;
+        // p->was_asleep = 1;
       }
       release(&p->lock);
     }
@@ -686,3 +775,82 @@ procdump(void)
     printf("\n");
   }
 }
+
+// https://stackoverflow.com/questions/11946622/implementation-of-random-number-generator
+static unsigned int seed = 1;
+
+struct spinlock randlock;
+
+void srand (int newseed) {
+  acquire(&randlock);
+  seed = (unsigned)newseed & 0x7fffffffU;
+  release(&randlock);
+}
+int rand (void) {
+  int ret;
+  acquire(&randlock);
+  seed = (seed * 1103515245U + 12345U) & 0x7fffffffU;
+  ret = (int)seed;
+  release(&randlock);
+  return ret;
+}
+
+int getrand(int min, int max){
+  return (rand() % (max-min+1)) + min;
+}
+
+int settickets(int tickets){
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  if(tickets < 1){
+    p->original_tickets = DEFAULT_TICKETS;
+    p->current_tickets = DEFAULT_TICKETS;
+    release(&p->lock);
+    return -1;
+  }
+  p->original_tickets = tickets;
+  p->current_tickets = tickets;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(struct pstat *ret){
+  struct proc *p;
+  struct pstat obj;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED){
+      obj.pid[i] = p->pid;
+      obj.inuse[i] = ((p->state == RUNNABLE) || (p->state == RUNNING));
+      obj.inQ[i] = p->inQ;
+      obj.tickets_original[i] = p->original_tickets;
+      obj.tickets_current[i] = p->current_tickets;
+      obj.queue_ticks[i][0] = p->ticks_in_q0;
+      obj.queue_ticks[i][1] = p->ticks_in_q1;
+      obj.waiting_time[i] = p->waiting_time;
+      obj.running_time[i] = p->total_running_time;
+      obj.times_scheduled[i] = p->scheduled_count;
+      i++;
+    }
+    release(&p->lock);
+  }
+  for(; i < NPROC; i++){
+    obj.pid[i] = 0;
+  }
+  if(copyout(myproc()->pagetable, (uint64)ret, (char *)&obj, sizeof(obj)) < 0){
+    return -1;
+  }
+  return 0;
+}
+
+int setlog(int n){
+  if(n == 0){
+    log_status = 0;
+  } 
+  else if(n == 1){
+    log_status = 1;
+  }
+  else return -1;
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..78dc61b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,15 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int inQ;                     // 0->top queue, 1->bottom queue
+  int original_tickets;        // original/initial number of tickets
+  int current_tickets;         // current number of tickets
+  int waiting_time;            // time spent in the queue
+  int running_time;            // time spent running
+  int scheduled_count;         // number of times scheduled
+  int ticks_in_q0;             // number of ticks spent in queue 0
+  int ticks_in_q1;             // number of ticks spent in queue 1
+  int total_running_time;      // total time spent running
+  int was_asleep;              // 1->was asleep, 0->was not asleep
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..e5daf49
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,19 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+#include "types.h"
+
+struct pstat
+{
+    int pid[NPROC];              // the process ID of each process
+    int inuse[NPROC];            // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC];              // which queue the process is currently in
+    int waiting_time[NPROC];     // the time each process has spent waiting before being scheduled
+    int running_time[NPROC];     // Number of times the process was scheduled before its time slice was used
+    int times_scheduled[NPROC];  // the total number of times this process was scheduled
+    int tickets_original[NPROC]; // the number of tickets each process originally had
+    int tickets_current[NPROC];  // the number of tickets each process currently has
+    uint queue_ticks[NPROC][2];  // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..af183cf 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
+extern uint64 sys_setlog(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
+[SYS_setlog]  sys_setlog,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3426b73 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+#define SYS_setlog 24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..bf832ec 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -57,6 +57,9 @@ sys_sleep(void)
   argint(0, &n);
   if(n < 0)
     n = 0;
+  myproc()->inQ = 1;
+  // LOG_1("Process %d (%s) sleeping for %d ticks\n", myproc()->pid, myproc()->name, n);
+  myproc()->was_asleep = 1;
   acquire(&tickslock);
   ticks0 = ticks;
   while(ticks - ticks0 < n){
@@ -91,3 +94,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  return settickets(n);
+  return 0;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 p;
+  argaddr(0, &p);
+  if(p == 0)
+    return -1;
+  return getpinfo((struct pstat *)p);
+}
+
+uint64
+sys_setlog(void)
+{
+  int n;
+  argint(0, &n);
+  return setlog(n);
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index f21fa26..bcaa9fa 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -160,6 +160,9 @@ kerneltrap()
   w_sstatus(sstatus);
 }
 
+extern struct proc proc[NPROC];
+extern int log_status;
+
 void
 clockintr()
 {
@@ -167,6 +170,31 @@ clockintr()
   ticks++;
   wakeup(&ticks);
   release(&tickslock);
+  // LOG_OTHERS(".");
+  for(int i = 0; i < NPROC; i++){
+    acquire(&proc[i].lock);
+    if(proc[i].state != UNUSED){
+      if(proc[i].inQ) proc[i].ticks_in_q1++;
+      else proc[i].ticks_in_q0++;
+      if(proc[i].state == RUNNING) 
+      {
+        proc[i].total_running_time++;
+        proc[i].running_time++;
+      }
+      else if(proc[i].state == RUNNABLE) 
+      {
+        proc[i].waiting_time++;
+        if(proc[i].inQ && proc[i].waiting_time>=WAIT_THRESH) 
+        {
+          proc[i].inQ = 0;
+          if(log_status)
+            LOG_BOOST("Process %d (%s) waited for %d ticks, promoted to queue 0\n", proc[i].pid, proc[i].name, proc[i].waiting_time);
+          // proc[i].waiting_time = 0;
+        }
+      }
+    }
+    release(&proc[i].lock);
+  }
 }
 
 // check if it's an external interrupt or software interrupt,
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..8737732
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,47 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "user.h"
+
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        fprintf(2, "Usage: %s number_of_tickets iteration_limit\n", argv[0]);
+        exit(1);
+    }
+
+    int ticket = atoi(argv[1]);
+    int iteration_limit = atoi(argv[2]);
+    int child_count=1;
+    // printf("Iteration limit: %u\n", iteration_limit);
+    if(iteration_limit<1){
+        fprintf(2, "Iteration limit should be between 0 and %u\n", __UINT32_MAX__);
+        exit(1);
+    }
+    if (settickets(ticket) < 0) {
+        fprintf(2, "Number of ticket is set to default.\n");
+    }
+    if(argc==4){
+        child_count=atoi(argv[3]);
+    }
+    for(int cc=0;cc<child_count;cc++){
+        int pid = fork();
+        if (pid < 0) {
+            fprintf(2, "fork failed\n");
+            exit(1);
+        }
+        if (pid == 0) {
+            for (uint32 i = 1; i <= iteration_limit; i++) {
+                if(i%200000000==0){
+                    sleep(2);
+                }
+            }
+            exit(0);
+        }
+        sleep(1);
+    }
+
+    for (uint32 i = 1; i <= iteration_limit; i++) {
+        
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/setlog.c b/user/setlog.c
new file mode 100644
index 0000000..de9b33d
--- /dev/null
+++ b/user/setlog.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "user.h"
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2) {
+        fprintf(2, "Usage: %s log_status\n", argv[0]);
+        exit(1);
+    }
+    if(setlog(atoi(argv[1]))!=0)
+    {
+        fprintf(2, "Error: Invalid log status\n");
+        exit(1);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..505c131
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,27 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/pstat.h"
+#include "user.h"
+
+int main(int argc, char *argv[])
+{
+    struct pstat st;
+    int ret = getpinfo(&st);
+    if (ret == 0)
+    {
+        printf("PID | In Use | In Q | Waiting Time | Running Time  | # Times Scheduled | Original Tickets | Current Tickets | q0 | q1\n");
+        for (int i = 0; i < NPROC; i++)
+        {
+            if(st.pid[i] == 0)
+                continue;
+            printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d  %d\n", st.pid[i], st.inuse[i], st.inQ[i], st.waiting_time[i], st.running_time[i], st.times_scheduled[i], st.tickets_original[i], st.tickets_current[i], st.queue_ticks[i][0], st.queue_ticks[i][1]);
+        }
+        // printf("Hello World\n");
+    }
+    else
+    {
+        fprintf(2, "%s: exec failed with return value: %d\n", argv[0], ret);
+        exit(1);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..4d59a4c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,6 @@
 struct stat;
+struct pstat;
+
 
 // system calls
 int fork(void);
@@ -22,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
+int setlog(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..6cc7039 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
+entry("setlog");
\ No newline at end of file
