diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..a27f29c
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,13 @@
+{
+    "files.associations": {
+        "types.h": "c",
+        "user.h": "c",
+        "stat.h": "c",
+        "param.h": "c",
+        "fcntl.h": "c",
+        "spinlock.h": "c",
+        "defs.h": "c",
+        "proc.h": "c",
+        "memlayout.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..9f78f91 100644
--- a/Makefile
+++ b/Makefile
@@ -128,6 +128,7 @@ UPROGS=\
 	$U/_forktest\
 	$U/_grep\
 	$U/_init\
+	$U/_load\
 	$U/_kill\
 	$U/_ln\
 	$U/_ls\
@@ -135,6 +136,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_trace\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..39c2605 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -6,6 +6,9 @@
 
 volatile static int started = 0;
 
+extern struct spinlock history_lock;
+extern struct spinlock print_lock;
+
 // start() jumps here in supervisor mode on all CPUs.
 void
 main()
@@ -20,6 +23,8 @@ main()
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
+    initlock(&print_lock, "print_lock"); // initialize print_lock
+    initlock(&history_lock, "history_lock"); // initialize history_lock
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..fbc84e4 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,5 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define MAXCMDLEN      100    // maximum Shell command length
+#define MAXHIST        10    // maximum history length
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..46ce1c6 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->trace_syscall_number = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..acd416e 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int trace_syscall_number;    // syscall number to trace
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..68656f0 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_info(void);
+extern uint64 sys_sync_print(void);
+extern uint64 sys_set_history(void);
+extern uint64 sys_get_history(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +131,120 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_info]    sys_info,
+[SYS_sync_print] sys_sync_print,
+[SYS_set_history] sys_set_history,
+[SYS_get_history] sys_get_history
 };
 
+const char *syscallnames[] = {
+  [SYS_fork]    = "fork",
+  [SYS_exit]    = "exit",
+  [SYS_wait]    = "wait",
+  [SYS_pipe]    = "pipe",
+  [SYS_read]    = "read",
+  [SYS_kill]    = "kill",
+  [SYS_exec]    = "exec",
+  [SYS_fstat]   = "fstat",
+  [SYS_chdir]   = "chdir",
+  [SYS_dup]     = "dup",
+  [SYS_getpid]  = "getpid",
+  [SYS_sbrk]    = "sbrk",
+  [SYS_sleep]   = "sleep",
+  [SYS_uptime]  = "uptime",
+  [SYS_open]    = "open",
+  [SYS_write]   = "write",
+  [SYS_mknod]   = "mknod",
+  [SYS_unlink]  = "unlink",
+  [SYS_link]    = "link",
+  [SYS_mkdir]   = "mkdir",
+  [SYS_close]   = "close",
+  [SYS_trace]   = "trace",
+  [SYS_info]    = "info",
+  [SYS_sync_print] = "sync_print",
+  [SYS_set_history] = "set_history",
+  [SYS_get_history] = "get_history"
+};
+
+int num_syscalls = NELEM(syscalls);
+
+void print_syscall_args(int num) {
+	uint64 a0 = argraw(0);
+	uint64 a1 = argraw(1);
+	uint64 a2 = argraw(2);
+	char str[101];
+	switch (num)
+	{
+	case SYS_exit:
+	case SYS_close:
+	case SYS_kill:
+	case SYS_dup:
+	case SYS_sbrk:
+	case SYS_sleep:
+	case SYS_trace:
+		printf("%d", (int) a0);
+		break;
+
+	case SYS_wait:
+	case SYS_pipe:
+		printf("%p", (int *) a0);
+		break;
+
+	case SYS_unlink:
+	case SYS_mkdir:
+	case SYS_chdir:
+  case SYS_sync_print:
+  case SYS_set_history:
+		argstr(0, str, 100);
+		printf("%s", str);
+		break;
+
+  case SYS_get_history:
+    printf("%d, %p", (int) a0, (char *) a1);
+    break;
+
+	case SYS_read:
+	case SYS_write:
+		printf("%d, %p, %d", (int) a0, (void *) a1, (int) a2);
+		break;
+
+	case SYS_exec:
+		argstr(0, str, 100);
+		printf("%s, %p", str, (char **) a1);
+		break;
+
+	case SYS_open:
+		argstr(0, str, 100);
+		printf("%s, %d", str, (int) a1);
+		break;
+
+	case SYS_mknod:
+		argstr(0, str, 100);
+		printf("%s, %hd, %hd", str, (short) a1, (short) a2);
+		break;
+
+	case SYS_fstat:
+		printf("%d, %p", (int) a0, (void *) a1);
+		break;
+
+	case SYS_link:
+		argstr(0, str, 100);
+		printf("%s, ", str);
+		argstr(1, str, 100);
+		printf("%s", str);
+		break;
+
+	case SYS_info:
+		printf("%p", (struct procInfo *) a0);
+		break;
+
+	default:
+		printf("unknown syscall\n\n");
+		break;
+	}
+}
+
 void
 syscall(void)
 {
@@ -138,7 +255,19 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+	if(p->trace_syscall_number == num) {
+		printf("pid: %d, syscall: %s, args: (", p->pid, syscallnames[num]);
+		print_syscall_args(num);
+		printf("), return: ");
+		if(num == SYS_exit)
+			printf("%d\n", (int) p->trapframe->a0);
+	}
+	if(num == SYS_exit)
+		p->trace_syscall_number = 0;
     p->trapframe->a0 = syscalls[num]();
+    if(p->trace_syscall_number == num) {
+		printf("%d\n", (int) p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e8ced89 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_info   23
+#define SYS_sync_print 24
+#define SYS_set_history 25
+#define SYS_get_history 26
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..25cc37b 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,114 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+extern int num_syscalls;
+
+uint64
+sys_trace(void)
+{
+  int syscall_number;
+  argint(0, &syscall_number);
+  if(syscall_number < 0 || syscall_number >= num_syscalls) {
+    return -1;
+  }
+  struct proc *p = myproc();
+  p->trace_syscall_number = syscall_number;
+  return 0;
+}
+
+struct procInfo {
+    int activeProcess;      // # of processes in RUNNABLE and RUNNING state
+    int totalProcess;       // # of total possible processes
+    int memsize;            // in bytes; summation of all active process
+    int totalMemSize;       // in bytes; all available physical Memory
+};
+
+extern struct proc proc[NPROC];
+
+uint64
+sys_info(void)
+{
+    struct procInfo *meminfo;
+	argaddr(0, (uint64 *)&meminfo);
+	struct procInfo newinfo;
+	newinfo.activeProcess = 0;
+	newinfo.totalProcess = NPROC;
+	newinfo.memsize = 0;
+	newinfo.totalMemSize = PHYSTOP - KERNBASE;
+	struct proc *p;
+	for(p = proc; p < &proc[NPROC]; p++) {
+		acquire(&p->lock);
+		if(p->state == RUNNABLE || p->state == RUNNING) {
+			newinfo.activeProcess++;
+			newinfo.memsize += p->sz;
+		}
+		release(&p->lock);
+	}
+	// printf("KERNEL SPACE system information:\n");
+	// printf("Processes: %d/%d\n", newinfo.activeProcess, newinfo.totalProcess);
+	// printf("RAM: %d/%d (Bytes)\n", newinfo.memsize, newinfo.totalMemSize);
+	if(copyout(myproc()->pagetable, (uint64) meminfo, (char *)&newinfo, sizeof(struct procInfo)) < 0) {
+		return -1;
+	}
+	return 0;
+}
+
+struct spinlock history_lock;
+struct spinlock print_lock;
+
+uint64
+sys_sync_print(void)
+{
+	char str[101];
+	argstr(0, str, 100);
+	acquire(&print_lock);
+	printf("%s\n", str);
+	release(&print_lock);
+	return 0;
+}
+
+char history[MAXHIST][MAXCMDLEN];
+int history_count = 0, history_index = 0;
+
+uint64
+sys_set_history(void)
+{
+	char str[MAXCMDLEN];
+	argstr(0, str, MAXCMDLEN);
+	// printf("<KERNEL> set_history: %s\n", str);
+	acquire(&history_lock);
+	for(int i=0; i<MAXCMDLEN; i++) {
+		history[history_index][i] = str[i];
+		if(str[i] == 0) break;
+	}
+	history_index = (history_index + 1) % MAXHIST;
+	if(history_count < MAXHIST) {
+		history_count++;
+	}
+	release(&history_lock);
+	return 0;
+}
+
+uint64
+sys_get_history(void)
+{
+	int index;
+	argint(0, &index);
+	char *addr;
+	argaddr(1, (uint64 *)&addr);
+	// printf("<KERNEL get> index: %d, pointer: %p\n", index, addr);
+	acquire(&history_lock);
+	if(index < 0 || index > history_count) {
+		release(&history_lock);
+		return -1;
+	}
+	char *str = history[((history_index - index + MAXHIST) % MAXHIST)];
+	// printf("<KERNEL> get_history: %s\n", str);
+	if(copyout(myproc()->pagetable, (uint64) addr, str, strlen(str) + 1) < 0) {
+		release(&history_lock);
+		return -1;
+	}
+	release(&history_lock);
+	return 0;
+}
\ No newline at end of file
diff --git a/user/load.c b/user/load.c
new file mode 100644
index 0000000..8ac407c
--- /dev/null
+++ b/user/load.c
@@ -0,0 +1,81 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+struct procInfo {
+    int activeProcess;      // # of processes in RUNNABLE and RUNNING state
+    int totalProcess;       // # of total possible processes
+    int memsize;            // in bytes; summation of all active process
+    int totalMemSize;       // in bytes; all available physical Memory
+};
+
+int
+main(int argc, char *argv[])
+{
+    if(argc !=3){
+        fprintf(2, "Usage: %s child_count allocation_amount\n", argv[0]);
+        exit(1);
+    }
+
+    int child_count = atoi(argv[1]);
+    int allocation_amount = atoi(argv[2]);
+    int pid;
+    char str[101];
+    for (int i = 0; i < child_count; i++) {
+        pid = fork();
+
+        if (pid == 0) {  // Child process
+            strcpy(str, "Child is created.");
+            sync_print(str);
+            char *mem = (char *) malloc(allocation_amount);
+
+            if (mem == 0) {
+                strcpy(str, "Memory allocation failed for child ");
+                numcat(str, i);
+                sync_print(str);
+                exit(1);
+            }
+            strcpy(str, "Child allocated ");
+            numcat(str, allocation_amount);
+            concat(str, " bytes.");
+            sync_print(str);
+
+            strcpy(str, "Child going to sleep.");
+            sync_print(str);
+
+            int count=0;
+            for(int j=0; j<1000000; j++){
+                count=0;
+                for(int k=0; k<5000; k++){
+                    count++;
+                }
+            }
+            // printf("Child %d is exiting with count: %d\n", i, count);
+            free(mem);
+            exit(0);
+        }
+        else if (pid < 0) {
+            printf("Fork failed\n");
+            exit(1);
+        }
+    }
+    strcpy(str, "Parent going to sleep.");
+    sync_print(str);
+    sleep(5*child_count);
+    printf("Parent wake up.\n");
+
+    struct procInfo *meminfo = (struct procInfo*) malloc(sizeof(struct procInfo));
+    if(info(meminfo)<0){
+        fprintf(2, "Error: info syscall failed\n");
+        exit(1);
+    }
+    // printf("Userspace meminfo: %p\n", meminfo);
+    printf("Current system information:\n");
+    printf("Processes: %d/%d\n", meminfo->activeProcess, meminfo->totalProcess);
+    printf("RAM: %d/%d (Bytes)\n", meminfo->memsize, meminfo->totalMemSize);
+
+    for (int i = 0; i < child_count; i++) {
+        wait(0);  // wait for the child process to finish
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..ccb0cfe 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -12,6 +12,7 @@
 #define BACK  5
 
 #define MAXARGS 10
+#define MAXCMDLEN 100
 
 struct cmd {
   int type;
@@ -163,10 +164,29 @@ main(void)
       buf[strlen(buf)-1] = 0;  // chop \n
       if(chdir(buf+3) < 0)
         fprintf(2, "cannot cd %s\n", buf+3);
+	  set_history(buf);
       continue;
     }
     if(fork1() == 0)
-      runcmd(parsecmd(buf));
+	{
+		if(buf[0]=='!' && buf[1]=='!')
+		{
+			//get command from kernel
+			int index = 1;
+			if(buf[2] != '\n')
+				index = atoi(buf+3);
+			char *str = (char *) malloc(MAXCMDLEN*sizeof(char));
+			if(get_history(index, str) < 0)
+			{
+				printf("No commands in history\n");
+				exit(0);
+			}
+			printf("%s", str);
+			strcpy(buf, str);
+		}
+		set_history(buf);
+		runcmd(parsecmd(buf));
+	}
     wait(0);
   }
   exit(0);
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..3dd9b4c
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..1d10ab0 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -106,6 +106,50 @@ atoi(const char *s)
   return n;
 }
 
+void
+strrev(char *str)
+{
+	int len = strlen(str);
+	for(int i=0; i<len/2; i++)
+	{
+		char temp = str[i];
+		str[i] = str[len-i-1];
+		str[len-i-1] = temp;
+	}
+}
+
+void
+itoa(char* str, int num)
+{
+	int i=0;
+	while (num>0)
+	{
+		str[i++] = (num%10)+'0';
+		num/=10;
+	}
+	str[i] = 0;
+	strrev(str);
+}
+
+void
+concat(char *dest, char *str)
+{
+	int len = strlen(dest);
+	for(int i=0;; i++)
+	{
+		dest[len+i] = str[i];
+		if(!str[i]) break;
+	}
+}
+
+void
+numcat(char *dest, int num)
+{
+	char str[11];
+	itoa(str, num);
+	concat(dest, str);
+}
+
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
diff --git a/user/user.h b/user/user.h
index 04013ca..6a54339 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct procInfo;
 
 // system calls
 int fork(void);
@@ -22,6 +23,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int info(struct procInfo*);
+int sync_print(const char*);
+int set_history(const char*);
+int get_history(int, char*);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -37,5 +43,9 @@ void* memset(void*, int, uint);
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+void strrev(char *str);
+void itoa(char* str, int num);
+void concat(char *dest, char *str);
+void numcat(char *dest, int num);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..c435df8 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("info");
+entry("sync_print");
+entry("set_history");
+entry("get_history");
\ No newline at end of file
