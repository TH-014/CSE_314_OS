diff --git a/Makefile b/Makefile
index 62fd0f8..5254050 100644
--- a/Makefile
+++ b/Makefile
@@ -135,6 +135,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_trace\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..acd416e 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int trace_syscall_number;    // syscall number to trace
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..3d754e5 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +127,102 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
 };
 
+const char *syscallnames[] = {
+  [SYS_fork]    = "fork",
+  [SYS_exit]    = "exit",
+  [SYS_wait]    = "wait",
+  [SYS_pipe]    = "pipe",
+  [SYS_read]    = "read",
+  [SYS_kill]    = "kill",
+  [SYS_exec]    = "exec",
+  [SYS_fstat]   = "fstat",
+  [SYS_chdir]   = "chdir",
+  [SYS_dup]     = "dup",
+  [SYS_getpid]  = "getpid",
+  [SYS_sbrk]    = "sbrk",
+  [SYS_sleep]   = "sleep",
+  [SYS_uptime]  = "uptime",
+  [SYS_open]    = "open",
+  [SYS_write]   = "write",
+  [SYS_mknod]   = "mknod",
+  [SYS_unlink]  = "unlink",
+  [SYS_link]    = "link",
+  [SYS_mkdir]   = "mkdir",
+  [SYS_close]   = "close",
+  [SYS_trace]   = "trace",
+};
+
+int num_syscalls = NELEM(syscalls);
+
+void print_syscall_args(int num) {
+	uint64 a0 = argraw(0);
+	uint64 a1 = argraw(1);
+	uint64 a2 = argraw(2);
+	char str[101];
+	switch (num)
+	{
+	case SYS_exit:
+	case SYS_close:
+	case SYS_kill:
+	case SYS_dup:
+	case SYS_sbrk:
+	case SYS_sleep:
+	case SYS_trace:
+		printf("%d", (int) a0);
+		break;
+
+	case SYS_wait:
+	case SYS_pipe:
+		printf("%p", (int *) a0);
+		break;
+
+	case SYS_unlink:
+	case SYS_mkdir:
+	case SYS_chdir:
+		argstr(0, str, 100);
+		printf("%s", str);
+		break;
+
+	case SYS_read:
+	case SYS_write:
+		printf("%d, %p, %d", (int) a0, (void *) a1, (int) a2);
+		break;
+
+	case SYS_exec:
+		argstr(0, str, 100);
+		printf("%s, %p", str, (char **) a1);
+		break;
+
+	case SYS_open:
+		argstr(0, str, 100);
+		printf("%s, %d", str, (int) a1);
+		break;
+	
+	case SYS_mknod:
+		argstr(0, str, 100);
+		printf("%s, %hd, %hd", str, (short) a1, (short) a2);
+		break;
+
+	case SYS_fstat:
+		printf("%d, %p", (int) a0, (void *) a1);
+		break;
+
+	case SYS_link:
+		argstr(0, str, 100);
+		printf("%s, ", str);
+		argstr(1, str, 100);
+		printf("%s", str);
+		break;
+
+	default:
+		printf("unknown syscall\n\n");
+		break;
+	}
+}
+
 void
 syscall(void)
 {
@@ -138,7 +233,19 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+	if(p->trace_syscall_number == num) {
+		printf("pid: %d, syscall: %s, args: (", p->pid, syscallnames[num]);
+		print_syscall_args(num);
+		printf("), return: ");
+		if(num == SYS_exit)
+			printf("%d\n", (int) p->trapframe->a0);
+	}
+	if(num == SYS_exit)
+		p->trace_syscall_number = 0;
     p->trapframe->a0 = syscalls[num]();
+    if(p->trace_syscall_number == num) {
+		printf("%d\n", (int) p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..fc22b30 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..a2e2b61 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,18 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+extern int num_syscalls;
+
+uint64
+sys_trace(void)
+{
+  int syscall_number;
+  argint(0, &syscall_number);
+  if(syscall_number < 0 || syscall_number >= num_syscalls) {
+    return -1;
+  }
+  struct proc *p = myproc();
+  p->trace_syscall_number = syscall_number;
+  return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..901b55e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..9c97b05 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
